//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.17929
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Beetle.Server.Core
{
    
    
    /// <summary>
    /// The BeetleServerSection Configuration Section.
    /// </summary>
    public partial class BeetleServerSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the BeetleServerSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string BeetleServerSectionSectionName = "beetleServerSection";
        
        /// <summary>
        /// Gets the BeetleServerSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public static global::Beetle.Server.Core.BeetleServerSection Instance
        {
            get
            {
                return ((global::Beetle.Server.Core.BeetleServerSection)(global::System.Configuration.ConfigurationManager.GetSection(global::Beetle.Server.Core.BeetleServerSection.BeetleServerSectionSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Beetle.Server.Core.BeetleServerSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Beetle.Server.Core.BeetleServerSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ServerName Property
        /// <summary>
        /// The XML name of the <see cref="ServerName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ServerNamePropertyName = "serverName";
        
        /// <summary>
        /// Gets or sets the ServerName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The ServerName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Beetle.Server.Core.BeetleServerSection.ServerNamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue="Beetle Service")]
        public virtual string ServerName
        {
            get
            {
                return ((string)(base[global::Beetle.Server.Core.BeetleServerSection.ServerNamePropertyName]));
            }
            set
            {
                base[global::Beetle.Server.Core.BeetleServerSection.ServerNamePropertyName] = value;
            }
        }
        #endregion
        
        #region DisplayName Property
        /// <summary>
        /// The XML name of the <see cref="DisplayName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DisplayNamePropertyName = "displayName";
        
        /// <summary>
        /// Gets or sets the DisplayName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The DisplayName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Beetle.Server.Core.BeetleServerSection.DisplayNamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue="Beetle Service")]
        public virtual string DisplayName
        {
            get
            {
                return ((string)(base[global::Beetle.Server.Core.BeetleServerSection.DisplayNamePropertyName]));
            }
            set
            {
                base[global::Beetle.Server.Core.BeetleServerSection.DisplayNamePropertyName] = value;
            }
        }
        #endregion
        
        #region Servers Property
        /// <summary>
        /// The XML name of the <see cref="Servers"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ServersPropertyName = "servers";
        
        /// <summary>
        /// Gets or sets the Servers.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Servers.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Beetle.Server.Core.BeetleServerSection.ServersPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Beetle.Server.Core.BeetleServerCollection Servers
        {
            get
            {
                return ((global::Beetle.Server.Core.BeetleServerCollection)(base[global::Beetle.Server.Core.BeetleServerSection.ServersPropertyName]));
            }
            set
            {
                base[global::Beetle.Server.Core.BeetleServerSection.ServersPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Beetle.Server.Core
{
    
    
    /// <summary>
    /// The BeetleServerConf Configuration Element.
    /// </summary>
    public partial class BeetleServerConf : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Beetle.Server.Core.BeetleServerConf.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::Beetle.Server.Core.BeetleServerConf.NamePropertyName]));
            }
            set
            {
                base[global::Beetle.Server.Core.BeetleServerConf.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region Host Property
        /// <summary>
        /// The XML name of the <see cref="Host"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string HostPropertyName = "host";
        
        /// <summary>
        /// Gets or sets the Host.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Host.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Beetle.Server.Core.BeetleServerConf.HostPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Host
        {
            get
            {
                return ((string)(base[global::Beetle.Server.Core.BeetleServerConf.HostPropertyName]));
            }
            set
            {
                base[global::Beetle.Server.Core.BeetleServerConf.HostPropertyName] = value;
            }
        }
        #endregion
        
        #region Port Property
        /// <summary>
        /// The XML name of the <see cref="Port"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string PortPropertyName = "port";
        
        /// <summary>
        /// Gets or sets the Port.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Port.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Beetle.Server.Core.BeetleServerConf.PortPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual int Port
        {
            get
            {
                return ((int)(base[global::Beetle.Server.Core.BeetleServerConf.PortPropertyName]));
            }
            set
            {
                base[global::Beetle.Server.Core.BeetleServerConf.PortPropertyName] = value;
            }
        }
        #endregion
        
        #region Package Property
        /// <summary>
        /// The XML name of the <see cref="Package"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string PackagePropertyName = "package";
        
        /// <summary>
        /// Gets or sets the Package.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Package.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Beetle.Server.Core.BeetleServerConf.PackagePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Package
        {
            get
            {
                return ((string)(base[global::Beetle.Server.Core.BeetleServerConf.PackagePropertyName]));
            }
            set
            {
                base[global::Beetle.Server.Core.BeetleServerConf.PackagePropertyName] = value;
            }
        }
        #endregion
        
        #region Handler Property
        /// <summary>
        /// The XML name of the <see cref="Handler"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string HandlerPropertyName = "handler";
        
        /// <summary>
        /// Gets or sets the Handler.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Handler.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Beetle.Server.Core.BeetleServerConf.HandlerPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Handler
        {
            get
            {
                return ((string)(base[global::Beetle.Server.Core.BeetleServerConf.HandlerPropertyName]));
            }
            set
            {
                base[global::Beetle.Server.Core.BeetleServerConf.HandlerPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Beetle.Server.Core
{
    
    
    /// <summary>
    /// A collection of BeetleServerConf instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Beetle.Server.Core.BeetleServerConf), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMapAlternate, AddItemName="add", RemoveItemName="remove", ClearItemsName="clear")]
    public partial class BeetleServerCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Beetle.Server.Core.BeetleServerConf"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string BeetleServerConfPropertyName = "beetleServerConf";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override string ElementName
        {
            get
            {
                return global::Beetle.Server.Core.BeetleServerCollection.BeetleServerConfPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Beetle.Server.Core.BeetleServerCollection.BeetleServerConfPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Beetle.Server.Core.BeetleServerConf)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Beetle.Server.Core.BeetleServerConf"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Beetle.Server.Core.BeetleServerConf"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Beetle.Server.Core.BeetleServerConf();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Beetle.Server.Core.BeetleServerConf"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Beetle.Server.Core.BeetleServerConf"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Beetle.Server.Core.BeetleServerConf this[int index]
        {
            get
            {
                return ((global::Beetle.Server.Core.BeetleServerConf)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Beetle.Server.Core.BeetleServerConf"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Beetle.Server.Core.BeetleServerConf"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Beetle.Server.Core.BeetleServerConf this[object name]
        {
            get
            {
                return ((global::Beetle.Server.Core.BeetleServerConf)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Beetle.Server.Core.BeetleServerConf"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="beetleServerConf">The <see cref="global::Beetle.Server.Core.BeetleServerConf"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Add(global::Beetle.Server.Core.BeetleServerConf beetleServerConf)
        {
            base.BaseAdd(beetleServerConf);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Beetle.Server.Core.BeetleServerConf"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="beetleServerConf">The <see cref="global::Beetle.Server.Core.BeetleServerConf"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Remove(global::Beetle.Server.Core.BeetleServerConf beetleServerConf)
        {
            base.BaseRemove(this.GetElementKey(beetleServerConf));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Beetle.Server.Core.BeetleServerConf"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Beetle.Server.Core.BeetleServerConf"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Beetle.Server.Core.BeetleServerConf GetItemAt(int index)
        {
            return ((global::Beetle.Server.Core.BeetleServerConf)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Beetle.Server.Core.BeetleServerConf"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Beetle.Server.Core.BeetleServerConf"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Beetle.Server.Core.BeetleServerConf GetItemByKey(string name)
        {
            return ((global::Beetle.Server.Core.BeetleServerConf)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
