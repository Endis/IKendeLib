//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18052
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Beetle.Tracker
{
    
    
    /// <summary>
    /// The TackerSection Configuration Section.
    /// </summary>
    public partial class TackerSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the TackerSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string TackerSectionSectionName = "tackerSection";
        
        /// <summary>
        /// Gets the TackerSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public static global::Beetle.Tracker.TackerSection Instance
        {
            get
            {
                return ((global::Beetle.Tracker.TackerSection)(global::System.Configuration.ConfigurationManager.GetSection(global::Beetle.Tracker.TackerSection.TackerSectionSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Beetle.Tracker.TackerSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Beetle.Tracker.TackerSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region AppName Property
        /// <summary>
        /// The XML name of the <see cref="AppName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string AppNamePropertyName = "appName";
        
        /// <summary>
        /// Gets or sets the AppName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The AppName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Beetle.Tracker.TackerSection.AppNamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string AppName
        {
            get
            {
                return ((string)(base[global::Beetle.Tracker.TackerSection.AppNamePropertyName]));
            }
            set
            {
                base[global::Beetle.Tracker.TackerSection.AppNamePropertyName] = value;
            }
        }
        #endregion
        
        #region Hosts Property
        /// <summary>
        /// The XML name of the <see cref="Hosts"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string HostsPropertyName = "hosts";
        
        /// <summary>
        /// Gets or sets the Hosts.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Hosts.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Beetle.Tracker.TackerSection.HostsPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Beetle.Tracker.TackerHostCollection Hosts
        {
            get
            {
                return ((global::Beetle.Tracker.TackerHostCollection)(base[global::Beetle.Tracker.TackerSection.HostsPropertyName]));
            }
            set
            {
                base[global::Beetle.Tracker.TackerSection.HostsPropertyName] = value;
            }
        }
        #endregion
        
        #region Properties Property
        /// <summary>
        /// The XML name of the <see cref="Properties"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string PropertiesPropertyName = "properties";
        
        /// <summary>
        /// Gets or sets the Properties.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Properties.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Beetle.Tracker.TackerSection.PropertiesPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Beetle.Tracker.PropertyCollection Properties
        {
            get
            {
                return ((global::Beetle.Tracker.PropertyCollection)(base[global::Beetle.Tracker.TackerSection.PropertiesPropertyName]));
            }
            set
            {
                base[global::Beetle.Tracker.TackerSection.PropertiesPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Beetle.Tracker
{
    
    
    /// <summary>
    /// The PropertyConfig Configuration Element.
    /// </summary>
    public partial class PropertyConfig : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Beetle.Tracker.PropertyConfig.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::Beetle.Tracker.PropertyConfig.NamePropertyName]));
            }
            set
            {
                base[global::Beetle.Tracker.PropertyConfig.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region Value Property
        /// <summary>
        /// The XML name of the <see cref="Value"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ValuePropertyName = "value";
        
        /// <summary>
        /// Gets or sets the Value.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Value.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Beetle.Tracker.PropertyConfig.ValuePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Value
        {
            get
            {
                return ((string)(base[global::Beetle.Tracker.PropertyConfig.ValuePropertyName]));
            }
            set
            {
                base[global::Beetle.Tracker.PropertyConfig.ValuePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Beetle.Tracker
{
    
    
    /// <summary>
    /// A collection of PropertyConfig instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Beetle.Tracker.PropertyConfig), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMapAlternate, AddItemName="add", RemoveItemName="remove", ClearItemsName="clear")]
    public partial class PropertyCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Beetle.Tracker.PropertyConfig"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string PropertyConfigPropertyName = "propertyConfig";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override string ElementName
        {
            get
            {
                return global::Beetle.Tracker.PropertyCollection.PropertyConfigPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Beetle.Tracker.PropertyCollection.PropertyConfigPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Beetle.Tracker.PropertyConfig)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Beetle.Tracker.PropertyConfig"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Beetle.Tracker.PropertyConfig"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Beetle.Tracker.PropertyConfig();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Beetle.Tracker.PropertyConfig"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Beetle.Tracker.PropertyConfig"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Beetle.Tracker.PropertyConfig this[int index]
        {
            get
            {
                return ((global::Beetle.Tracker.PropertyConfig)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Beetle.Tracker.PropertyConfig"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Beetle.Tracker.PropertyConfig"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Beetle.Tracker.PropertyConfig this[object name]
        {
            get
            {
                return ((global::Beetle.Tracker.PropertyConfig)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Beetle.Tracker.PropertyConfig"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="propertyConfig">The <see cref="global::Beetle.Tracker.PropertyConfig"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Add(global::Beetle.Tracker.PropertyConfig propertyConfig)
        {
            base.BaseAdd(propertyConfig);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Beetle.Tracker.PropertyConfig"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="propertyConfig">The <see cref="global::Beetle.Tracker.PropertyConfig"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Remove(global::Beetle.Tracker.PropertyConfig propertyConfig)
        {
            base.BaseRemove(this.GetElementKey(propertyConfig));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Beetle.Tracker.PropertyConfig"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Beetle.Tracker.PropertyConfig"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Beetle.Tracker.PropertyConfig GetItemAt(int index)
        {
            return ((global::Beetle.Tracker.PropertyConfig)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Beetle.Tracker.PropertyConfig"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Beetle.Tracker.PropertyConfig"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Beetle.Tracker.PropertyConfig GetItemByKey(string name)
        {
            return ((global::Beetle.Tracker.PropertyConfig)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Beetle.Tracker
{
    
    
    /// <summary>
    /// The TackerHostConf Configuration Element.
    /// </summary>
    public partial class TackerHostConf : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Host Property
        /// <summary>
        /// The XML name of the <see cref="Host"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string HostPropertyName = "host";
        
        /// <summary>
        /// Gets or sets the Host.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Host.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Beetle.Tracker.TackerHostConf.HostPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Host
        {
            get
            {
                return ((string)(base[global::Beetle.Tracker.TackerHostConf.HostPropertyName]));
            }
            set
            {
                base[global::Beetle.Tracker.TackerHostConf.HostPropertyName] = value;
            }
        }
        #endregion
        
        #region Port Property
        /// <summary>
        /// The XML name of the <see cref="Port"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string PortPropertyName = "port";
        
        /// <summary>
        /// Gets or sets the Port.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Port.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Beetle.Tracker.TackerHostConf.PortPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual int Port
        {
            get
            {
                return ((int)(base[global::Beetle.Tracker.TackerHostConf.PortPropertyName]));
            }
            set
            {
                base[global::Beetle.Tracker.TackerHostConf.PortPropertyName] = value;
            }
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Beetle.Tracker.TackerHostConf.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::Beetle.Tracker.TackerHostConf.NamePropertyName]));
            }
            set
            {
                base[global::Beetle.Tracker.TackerHostConf.NamePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Beetle.Tracker
{
    
    
    /// <summary>
    /// A collection of TackerHostConf instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Beetle.Tracker.TackerHostConf), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMapAlternate, AddItemName="add", RemoveItemName="remove", ClearItemsName="clear")]
    public partial class TackerHostCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Beetle.Tracker.TackerHostConf"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string TackerHostConfPropertyName = "tackerHostConf";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override string ElementName
        {
            get
            {
                return global::Beetle.Tracker.TackerHostCollection.TackerHostConfPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Beetle.Tracker.TackerHostCollection.TackerHostConfPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Beetle.Tracker.TackerHostConf)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Beetle.Tracker.TackerHostConf"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Beetle.Tracker.TackerHostConf"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Beetle.Tracker.TackerHostConf();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Beetle.Tracker.TackerHostConf"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Beetle.Tracker.TackerHostConf"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Beetle.Tracker.TackerHostConf this[int index]
        {
            get
            {
                return ((global::Beetle.Tracker.TackerHostConf)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Beetle.Tracker.TackerHostConf"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Beetle.Tracker.TackerHostConf"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Beetle.Tracker.TackerHostConf this[object name]
        {
            get
            {
                return ((global::Beetle.Tracker.TackerHostConf)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Beetle.Tracker.TackerHostConf"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="tackerHostConf">The <see cref="global::Beetle.Tracker.TackerHostConf"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Add(global::Beetle.Tracker.TackerHostConf tackerHostConf)
        {
            base.BaseAdd(tackerHostConf);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Beetle.Tracker.TackerHostConf"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="tackerHostConf">The <see cref="global::Beetle.Tracker.TackerHostConf"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Remove(global::Beetle.Tracker.TackerHostConf tackerHostConf)
        {
            base.BaseRemove(this.GetElementKey(tackerHostConf));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Beetle.Tracker.TackerHostConf"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Beetle.Tracker.TackerHostConf"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Beetle.Tracker.TackerHostConf GetItemAt(int index)
        {
            return ((global::Beetle.Tracker.TackerHostConf)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Beetle.Tracker.TackerHostConf"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Beetle.Tracker.TackerHostConf"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Beetle.Tracker.TackerHostConf GetItemByKey(string name)
        {
            return ((global::Beetle.Tracker.TackerHostConf)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
